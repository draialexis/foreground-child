{"version":3,"file":"change-exit.js","sourceRoot":"","sources":["change-exit.ts"],"names":[],"mappings":"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","sourcesContent":["import { spawn } from 'child_process'\nimport { fileURLToPath } from 'url'\nimport { foregroundChild } from '../../dist/esm/index.js'\n\nconst __filename = fileURLToPath(import.meta.url)\n\nconst parent = (childExit: string, changeArg: string, defer: boolean) => {\n  const args = [__filename, 'child', String(childExit)]\n  spawn(process.execPath, args)\n  const asNum = parseInt(childExit, 10)\n  const expect = !isNaN(asNum) ? [asNum, null] : [null, childExit]\n  const change: number | undefined | false | NodeJS.Signals =\n    changeArg === 'undefined' ? undefined\n    : changeArg === 'false' ? false\n    : !isNaN(parseInt(changeArg, 10)) ? parseInt(changeArg, 10)\n    : (changeArg as NodeJS.Signals)\n\n  foregroundChild(process.execPath, args, (code, signal) => {\n    const parentExitExpect =\n      change === false ? [33, null]\n      : change === undefined ? [code, signal]\n      : typeof change === 'number' ? [change, null]\n      : [null, change]\n    const report = {\n      childExit: {\n        expect,\n        actual: [code, signal],\n      },\n      parentExit: {\n        expect: parentExitExpect,\n      },\n      change,\n      defer,\n    }\n    if (change === false) setTimeout(() => process.exit(33), 200)\n    if (defer) {\n      return new Promise<typeof change>(res =>\n        setTimeout(() => {\n          console.log('%j', report)\n          res(change)\n        }, 50),\n      )\n    } else {\n      console.log('%j', report)\n      return change\n    }\n  })\n}\n\nconst child = (exit: string) => {\n  const asNum = parseInt(exit, 10)\n  if (!isNaN(asNum)) process.exit(asNum)\n  const asSig = exit as NodeJS.Signals\n  process.kill(process.pid, asSig)\n  setTimeout(() => {}, 200)\n}\n\nswitch (process.argv[2]) {\n  case 'parent':\n    parent(\n      String(process.argv[3]),\n      String(process.argv[4]),\n      process.argv[5] === '1',\n    )\n    break\n  case 'child':\n    child(String(process.argv[3]))\n    break\n}\n"]}